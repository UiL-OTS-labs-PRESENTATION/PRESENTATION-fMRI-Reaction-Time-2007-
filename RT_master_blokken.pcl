#int k = clock.time ();
#loop until clock.time() > k + 2000  begin; end;
string begin_string = "begin_block ";
string end_string = "end_block ";
string interval_string = "interval ";

#random intervals
array <int> rnd_intervals[72]=
{6000,7000,6500,7500,9000,6500,
6000,8000,6500,7000,8000,7500,
6000,7000,9000,7500,8000,9000,

6000,6500,7500,8000,9000,7000,
6500,7000,6000,8000,7500,9000,
9000,6000,7000,6500,7500,8000,

7000,6000,6500,8000,7500,9000,
8000,6000,7000,6500,9000,7500,
6000,7000,6500,9000,7500,8000,

6000,7000,6500,7500,9000,8000,
6000,6500,9000,7000,7500,8000,
9000,6000,7000,7500,6500,8000
};

#rnd_intervals.shuffle();

# Deze 2 arrays worden gebruikt om de volgorde van de blokken vast te leggen
array<trial> all[4][36];
all[1] = groter_kleiner_array;
all[2] = links_rechts_array;
all[3] = samen_met_array;
all[4] = ouder_jonger_array;

array<int> order[4*18]={
1,2,3,4,
2,3,4,1,
3,4,1,2,
4,1,2,3,
4,3,2,1,
3,2,1,4,
2,1,4,3,
1,4,3,2,
1,3,2,4,
3,2,4,1,
2,4,1,3,
4,1,3,2,
1,2,3,4,
2,3,4,1,
3,4,1,2,
4,1,2,3,
4,3,2,1,
3,2,1,4
};



sub
   present( string caption )
begin
   text1.set_caption( caption );
   text1.redraw();  
   trial1.present()
end;

sub
   presentLong( string caption )
begin
   text1.set_caption( caption );
   text1.redraw();  
   trial2.present()
end;


trial1.present();
introTrial.present();




# Hiermee wordt het begin van het experiment gecodeerd
# response_stim.set_event_code("experiment_begin");
# responseTrial.present();
triggerTrial.present();

int t = 0;
int trig;
# Dit is de loop van een blok van 2 trials
loop
	int i = 1;
	array<int> indices[4]
until
	i > order.count()
begin
	if ((i-1!=0)&&(mod(i-1,18)==0)&&(trig==0)) then
		presentLong("Toets s aan het einde van de scansessie om de volgende sessie te starten");
		sessieTrial.present();
		presentLong("Wacht op Trigger");
		triggerTrial.present();
		trig = 1;
	else
		int condition = order[i];
		# hiermee wordt het begin van een blok weggeschreven
		response_stim.set_event_code(begin_string + string (condition));
		responseTrial.present();
		# hier worden de 2 trials aangeboden
		t = t + 1;
		string tr = "trial ";
		string bl = "\nblok ";
		present( tr + string (t) + bl + string (i));
		indices[condition] = indices[condition] + 1;
		all[condition][indices[condition]].present();
		
		t = t + 1;
		present( tr + string (t) + bl + string (i));
		indices[condition] = indices[condition] + 1;
		all[condition][indices[condition]].present();
		
		# hier wordt het einde van het blok weggeschreven
		response_stim.set_event_code(end_string + string (condition));
		responseTrial.present();
	
		# wacht loop voor het interval tussen de blokken
		int c = clock.time();
		response_stim.set_event_code(interval_string + string(rnd_intervals[i]));
		responseTrial.present();
		present("interval");
		loop
		until
			clock.time() > c + rnd_intervals[i] 
		begin
		end;
		
		trig = 0;
		i = i + 1;
	end;
end;


# hier wordt het einde van het experiment weggeschreven
response_stim.set_event_code("experiment_end");
responseTrial.present();

eindeTrial.present();
